@inject UserService UserService
@inject ProjectService ProjectService
@inject RoleService RoleService

<Form>
    <Field>
        <FieldLabel>Email</FieldLabel>
        <TextEdit Role="TextRole.Email" Placeholder="Enter email" @bind-Text="UserRegistration.Email"/>
    </Field>
    <Field>
        <FieldLabel>Password</FieldLabel>
        <TextEdit Role="TextRole.Password" Placeholder="Enter password" @bind-Text="UserRegistration.Password"/>
    </Field>
    <Field>
        <FieldLabel>Assign roles</FieldLabel>
        <Select TValue="string" @bind-SelectedValue="UserRegistration.Role">
            @foreach (var role in Roles)
            {
                <SelectItem TValue="string" Value="role.Name">@role.Name</SelectItem>
            }
        </Select>
    </Field>
    @*<Field>
        <FieldLabel>Assign to projects</FieldLabel>
        <Select TValue="Project" SelectedValues="UserRegistration.Projects" SelectedValuesChanged="@OnSelectedProjectsChanged">
            @foreach (var project in Projects)
            {
                <SelectItem TValue="Project" Value="project">@project.Name</SelectItem>
            }
        </Select>
    </Field>*@
    <Button Color="Color.Primary" @onclick="FormSubmitted">Submit</Button>
</Form>

@code {
    List<Project> Projects = new List<Project>();
    List<IdentityRole> Roles = new List<IdentityRole>();
    UserRegistration UserRegistration = new UserRegistration();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Projects = ProjectService.GetAll();
        Roles = RoleService.GetAll();
        UserRegistration.Role = Roles[0].Name;
    }

    [Parameter]
    public EventCallback<UserRegistration> OnFormSubmitted { get; set; }

    //private void OnSelectedProjectsChanged(IReadOnlyList<Project> projects)
    //{
    //    UserRegistration.Projects.Clear();
    //    UserRegistration.Projects.AddRange(projects);
    //}

    private async void FormSubmitted()
    {
        await OnFormSubmitted.InvokeAsync(UserRegistration);
    }
}
