@inject ProjectService ProjectService

<Heading Size="HeadingSize.Is3">All projects</Heading>

@if (Projects.Count == 0)
{
    <Alert Color="Color.Info" Visible="true">
        <AlertMessage>There's no project.</AlertMessage>
        <AlertDescription>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <Blazorise.Link Class="btn btn-link" Clicked="@(() => ProjectFormModal.Show())">Create a project</Blazorise.Link>
                </Authorized>
                <NotAuthorized>
                    You can ask an administrator to create a project.
                </NotAuthorized>
            </AuthorizeView>
        </AlertDescription>
    </Alert>

    <Modal @ref="ProjectFormModal" Closed="OnProjectModalClosed">
        <ModalBackdrop />
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Create project</ModalTitle>
                <CloseButton Clicked="@(() => ProjectFormModal.Hide())"></CloseButton>
            </ModalHeader>
            <ModalBody>
                <ProjectForm OnFormSubmitted="CreateProject" />
            </ModalBody>
            <ModalFooter>
                <Alert @ref="ProjectCreationAlertSuccess" Color="Color.Success">
                    <AlertMessage>Project created successfully!</AlertMessage>
                </Alert>
                <Alert @ref="ProjectCreationAlertFailure" Color="Color.Danger">
                    <AlertMessage>Error creating project.</AlertMessage>
                </Alert>
            </ModalFooter>
        </ModalContent>
    </Modal>
}
else
{
    <ListGroup>
        @foreach (var project in Projects)
        {
            <ListGroupItem>
                <Container Fluid="true">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is10" Class="align-self-center">
                            @project.Name
                        </Column>
                        <Column ColumnSize="ColumnSize.Is2" Class="d-flex justify-content-end align-self-center">
                            <Buttons>
                                <AuthorizeView Roles="Admin">
                                    @*There's an issue with intellisense as Link must be an ambiguous tag*@
                                    <Blazorise.Link Clicked="@(() => OpenProjectUpdateModal(project))" Class="btn">
                                        <Icon Name="IconName.Edit" />
                                    </Blazorise.Link>
                                </AuthorizeView>
                                <Blazorise.Link To='@($"/project/{project.Id}")' Class="btn">
                                    <Icon Name="IconName.Eye" />
                                </Blazorise.Link>
                            </Buttons>
                        </Column>
                    </Row>
                </Container>
            </ListGroupItem>
        }
    </ListGroup>

    <Modal @ref="ProjectUpdateFormModal" Closed="OnProjectModalClosed">
        <ModalBackdrop />
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Create project</ModalTitle>
                <CloseButton Clicked="@(() => ProjectUpdateFormModal.Hide())"></CloseButton>
            </ModalHeader>
            <ModalBody>
                <ProjectForm Project="ProjectToUpdate" OnFormSubmitted="UpdateProject" />
            </ModalBody>
            <ModalFooter>
                <Alert @ref="ProjectUpdateAlertSuccess" Color="Color.Success">
                    <AlertMessage>Project updated successfully!</AlertMessage>
                </Alert>
                <Alert @ref="ProjectUpdateAlertFailure" Color="Color.Danger">
                    <AlertMessage>Error updating project.</AlertMessage>
                </Alert>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    Modal ProjectFormModal;
    Alert ProjectCreationAlertSuccess;
    Alert ProjectCreationAlertFailure;

    Modal ProjectUpdateFormModal;
    Alert ProjectUpdateAlertSuccess;
    Alert ProjectUpdateAlertFailure;

    List<Project> Projects = new List<Project>();

    ProjectRegistration ProjectToUpdate;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Projects = ProjectService.GetAll();
    }

    public void Reload()
    {
        Projects = ProjectService.GetAll();
        StateHasChanged();
    }

    private void CreateProject(ProjectRegistration project)
    {
        var isCreated = ProjectService.Create(project);

        if (isCreated)
        {
            ProjectCreationAlertFailure.Hide();
            ProjectCreationAlertSuccess.Show();
        }
        else
        {
            ProjectCreationAlertSuccess.Hide();
            ProjectCreationAlertFailure.Show();
        }
        Projects = ProjectService.GetAll();
        StateHasChanged();
    }

    private void OnProjectModalClosed()
    {
        ProjectCreationAlertSuccess?.Hide();
        ProjectCreationAlertFailure?.Hide();
        ProjectUpdateAlertSuccess?.Hide();
        ProjectUpdateAlertFailure?.Hide();
    }

    void OpenProjectUpdateModal(Project project)
    {
        ProjectToUpdate = new ProjectRegistration(project);
        Console.WriteLine($"{project} -- {project.ProjectCategories.Count} -- {project.UserProjects.Count}");
        Console.WriteLine($"{ProjectToUpdate} -- {ProjectToUpdate.Categories.Count} -- {ProjectToUpdate.Contributors.Count}");
        StateHasChanged();
        ProjectUpdateFormModal.Show();
    }

    private void UpdateProject(ProjectRegistration project)
    {
        var isUpdated = ProjectService.Update(project);

        if (isUpdated)
        {
            ProjectUpdateAlertFailure.Hide();
            ProjectUpdateAlertSuccess.Show();
        }
        else
        {
            ProjectUpdateAlertSuccess.Hide();
            ProjectUpdateAlertFailure.Show();
        }
        Projects = ProjectService.GetAll();
        StateHasChanged();
    }
}