@inject ProjectService ProjectService
@inject UserService UserService
@inject CategoryService CategoryService 

<Form>
    <Field>
        <FieldLabel>Name</FieldLabel>
        <TextEdit Role="TextRole.Text" Placeholder="Enter project's name" @bind-Text="Project.Name" />
    </Field>
    <Field>
        <FieldLabel>Description</FieldLabel>
        <MemoEdit @bind-Text="Project.Description"></MemoEdit>
    </Field>
    <Field>
        <FieldLabel>Assign project's owner</FieldLabel>
        <Select TValue="string" SelectedValue="OwnerId" SelectedValueChanged="OnSelectedOwnerChanged">
            @foreach (var user in Users)
            {
                @if (IsOwner(user))
                {
                    <SelectItem TValue="string" Value="user.Id" Class="text-success">@user.Email</SelectItem>
                }
                else
                {
                    <SelectItem TValue="string" Value="user.Id">@user.Email</SelectItem>
                }
            }
        </Select>
    </Field>
    <Field>
        <FieldLabel>Assign contributors</FieldLabel>
        <Select @ref="ContributorSelect" Multiple="true" TValue="string" SelectedValues="Contributors" SelectedValuesChanged="OnSelectedContributorsChanged">
            @foreach (var user in Users)
            {
                @if (IsAContributor(user))
                {
                    <SelectItem TValue="string" Value="user.Id" Class="text-success">@user.Email</SelectItem>
                }
                else
                {
                    <SelectItem TValue="string" Value="user.Id">@user.Email</SelectItem>
                }
            }
        </Select>
    </Field>
    <Field>
        <FieldLabel>Assign categories</FieldLabel>
        <Select Multiple="true" TValue="int" SelectedValues="CategoriesId" SelectedValuesChanged="OnSelectedCategoriesChanged">
            @foreach (var category in Categories)
            {
                @if (IsInCategory(category))
                {
                    <SelectItem TValue="int" Value="category.Id" Class="text-success">@category.Name</SelectItem>
                }
                else
                {
                    <SelectItem TValue="int" Value="category.Id">@category.Name</SelectItem>
                }
             }
        </Select>
    </Field>
    <Button Color="Color.Primary" @onclick="FormSubmitted">Submit</Button>
</Form>

@code {
    [Parameter]
    public EventCallback<ProjectRegistration> OnFormSubmitted { get; set; }

    [Parameter]
    public ProjectRegistration Project { get; set; }

    List<ApplicationUser> Users = new List<ApplicationUser>();
    List<Category> Categories = new List<Category>();

    string OwnerId;
    List<string> Contributors = new List<string>();
    List<int> CategoriesId = new List<int>();

    Select<string> ContributorSelect;

    protected override void OnInitialized()
    {
        Init();
    }

    private async void FormSubmitted()
    {
        await OnFormSubmitted.InvokeAsync(Project);
        Init(true);
    }

    // Currently there is an issue with the Select component that do not get the changes from the code.
    // so if you add changes here for updating the component it will not work.
    // Solution might be to have two different form depending on the action we want to perform
    public void Init(bool force = false)
    {
        Console.WriteLine("Enters init");
        Users = UserService.GetAll();
        Categories = CategoryService.GetAll();

        if (Project == null || force)
        {
            Console.WriteLine("Project is null");
            Project = new ProjectRegistration();
            Project.Owner = Users[0];
        }
        StateHasChanged();
    }

    // For some reason I cannot make the Select binding work with the ApplicationUser or Category or any other user defined types directly
    // so we have to rely on getting the right data from the selected Ids instead.
    void OnSelectedOwnerChanged(string ownerId)
    {
        OwnerId = ownerId;
        Project.Owner = Users.Where(u => u.Id == OwnerId).Single();
    }

    void OnSelectedContributorsChanged(IReadOnlyList<string> users)
    {
        Project.Contributors = Users.Join(users, user => user.Id, id => id, (user, id) => user).ToList();
    }

    void OnSelectedCategoriesChanged(IReadOnlyList<int> categories)
    {
        Project.Categories = Categories.Join(categories, cat => cat.Id, id => id, (cat, id) => cat).ToList();
    }

    bool IsAContributor(ApplicationUser user)
    {
        return Project.Contributors.Any(u => u.Id == user.Id);
    }

    bool IsInCategory(Category category)
    {
        return Project.Categories.Any(c => c.Id == category.Id);
    }

    bool IsOwner(ApplicationUser user)
    {
        return Project.Owner.Id == user.Id;
    }
}
