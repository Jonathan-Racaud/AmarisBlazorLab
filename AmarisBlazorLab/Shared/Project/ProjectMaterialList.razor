@inject MaterialService MaterialService
@inject HttpClient HttpClient
@inject NavigationManager Navigation;

<Row>
    <Column ColumnSize="ColumnSize.IsFull">
        <Heading Size="HeadingSize.Is5">Materials:</Heading>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.IsQuarter">
        <Button Color="Color.Secondary" Clicked="ShowUploadForm">Upload material</Button>
    </Column>
</Row>
@if (Materials.Count == 0)
{
    <Row Margin="Margin.Is2.FromTop">
        <Column ColumnSize="ColumnSize.IsFull">
            <Alert Visible="true" Color="Color.Info">
                <AlertMessage>There are no material for this project.</AlertMessage>
            </Alert>
        </Column>
    </Row>
}
else
{
    <Row Margin="Margin.Is2.FromTop">
        <Column ColumnSize="ColumnSize.IsFull">
            <ListGroup>
                @foreach (var material in Materials)
                {
                    <ListGroupItem>
                        @if (material.MaterialType.Name == "Image")
                        {
                            <Icon Name="IconName.Image" />
                        }
                        else if (material.MaterialType.Name == "Video")
                        {
                            <Icon Name="IconName.Video" />
                        }
                        else if (material.MaterialType.Name == "Document")
                        {
                            <Icon Name="IconName.FileAlt" />
                        }
                        else if (material.MaterialType.Name == "Url")
                        {
                            <Icon Name="IconName.Link" />
                        }
                        <Blazorise.Link To="@GetDownloadUrl(material)" Target="Target.Blank">@material.Name</Blazorise.Link>
                    </ListGroupItem>
                }
            </ListGroup>
        </Column>
    </Row>
}

<Modal @ref="UploadModal">
    <ModalBackdrop />
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Upload material</ModalTitle>
            <CloseButton Clicked="@(() => UploadModal.Hide())"></CloseButton>
        </ModalHeader>
        <ModalBody>
            <MaterialForm Project="Project" OnFormSubmitted="UploadMaterial" />
        </ModalBody>
        <ModalFooter>
            <Alert @ref="UploadAlertSuccess" Color="Color.Success">
                <AlertMessage>Material uploaded successfully!</AlertMessage>
            </Alert>
            <Alert @ref="UploadAlertFailure" Color="Color.Danger">
                <AlertMessage>Error uploading material.</AlertMessage>
            </Alert>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public Project Project { get; set; }

    List<Material> Materials;

    Modal UploadModal;
    Alert UploadAlertSuccess;
    Alert UploadAlertFailure;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Materials = MaterialService.GetAllFromProject(Project);
    }

    void ShowUploadForm()
    {
        UploadAlertFailure.Hide();
        UploadAlertSuccess.Hide();
        UploadModal.Show();
    }

    async void UploadMaterial(MaterialUpload material)
    {
        if (await MaterialService.Upload(material))
        {
            UploadAlertSuccess.Show();
            UploadAlertFailure.Hide();
        }
        else
        {
            UploadAlertSuccess.Hide();
            UploadAlertFailure.Show();
        }
        Materials = MaterialService.GetAllFromProject(Project);
        StateHasChanged();
    }

    string GetDownloadUrl(Material material)
    {
        var filename = material.Source.Substring(material.Source.LastIndexOf('\\') + 1);
        var url = $"api/download/{Project.Name}/{filename}";

        return url;
    }
}
