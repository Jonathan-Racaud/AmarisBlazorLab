@page "/project/{ProjectId:int}"
@attribute [Authorize]
@inject ProjectService ProjectService
@inject UserService UserService

<Container>
@if (Project != null)
{
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Heading Size="HeadingSize.Is1">@Project.Name</Heading>
            <Heading Size="HeadingSize.Is3">Owner: @Project.Owner.Email</Heading>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @if (Project.ProjectCategories != null)
            {
                <ProjectCategoriesList Project="Project" />
            }
        </Column>
    </Row>
    <Divider />
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Paragraph>@Project.Description</Paragraph>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @if (User != null)
            {
                @if (!IsAContributor(User))
                {
                    <Button Color="Color.Primary" Clicked="JoinProject">Join</Button>
                }
                else
                {
                    <Button Color="Color.Danger" Clicked="LeaveProject">Leave</Button>
                }
            }
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <ProjectContributorsList Project="Project" />
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <ProjectMaterialList Project="Project" />
        </Column>
    </Row>
}
else
{
    <Alert Visible="true">
        <AlertMessage>Project not found.</AlertMessage>
        <AlertDescription>The project with id: @ProjectId couldn't be found.</AlertDescription>
    </Alert>
}
</Container>


@code {
    [Parameter]
    public int ProjectId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    Project Project;
    ApplicationUser User;

    protected override async void OnInitialized()
    {
        var authState = await authenticationStateTask;

        User = UserService.GetFromIdentityName(authState.User.Identity.Name);
        Project = ProjectService.Get(ProjectId);
    }

    bool IsAContributor(ApplicationUser User)
    {
        if (User.Id == Project.Owner.Id)
        {
            return true;
        }

        return Project.UserProjects.Any(up => up.UserId == User.Id);
    }

    void JoinProject()
    {
        ProjectService.AssignContributor(Project, User);
        StateHasChanged();
    }

    void LeaveProject()
    {
        ProjectService.RemoveContributor(Project, User);
        StateHasChanged();
    }
}
